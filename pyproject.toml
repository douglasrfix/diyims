[project]
name = "diyims"
version = "0.0.0a140"
#general_utils agent = 0.0.0a54
description = "A diy independent media services app that provides the modern version of the single person printing press."
readme = "README.md"
authors = [
    { name = "Douglas R Fix", email = "douglasrfix@prairieobserver.com" }
]
#license = "GPL-3.0-or-later"
#repository = "https://github.com/douglasrfix/diyims"
requires-python = ">=3.11.2"
dependencies = [
    "aiosql>=13.4",
    "email-validator>=2.2.0",
    "fastapi-cli>=0.0.8",
    # fastapi requires manual install on remote
    "fastapi[standard]>=0.116.1",
    "httpx>=0.28.1",
    "jinja2>=3.1.6",
    "psutil>=7.0.0",
    "pydantic-extra-types>=2.10.5",
    "pydantic-settings>=2.9.1",
    "python-dateutil>=2.9.0.post0",
    "python-multipart>=0.0.20",
    "requests>=2.32.4",
    "sqlmodel>=0.0.24",
    "typer<=16.0",
    "ujson>=5.10.0",
    "uvicorn>=0.34.3",
]
[project.scripts]
diyims = "diyims.diyims_cmd:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

#[tool.hatch.build.targets.sdist]
#include = [
#  "/src/diyims*.py",
#  "/src/diyims/resources/*.car",
#  "/src/diyims/sql/*.sql"
#]

[tool.hatch.build.targets.wheel]
packages = ["src/diyims"]

[dependency-groups]
dev = [
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-cov>=6.1.1",
    "pytest-xdist>=3.7.0",
    "python-dateutil>=2.9.0.post0",
    "ruff>=0.11.13",
    "types-psutil>=7.0.0.20250601",
    "types-python-dateutil>=2.9.0.20250516",
    "types-requests>=2.32.4.20250611",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    # "-m component",
    # "-n 10",
    # "--dist load",
    "-rA",
    "-vv",
    "--capture=tee-sys",
    # "--cov=diyims",
    "--cov-append",
    "--cov-report=term-missing",
    "--basetemp=C:\\Users\\dougl\\diyims\\tmp",
]
markers = [
    "setup",
    "component",
    "mp",
]
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py311"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
